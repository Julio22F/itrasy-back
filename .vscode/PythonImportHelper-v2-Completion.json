[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "timegm",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "timegm",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework_jwt.settings",
        "description": "rest_framework_jwt.settings",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.settings",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework_jwt.settings",
        "description": "rest_framework_jwt.settings",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.settings",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "get_authorization_header",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "get_authorization_header",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BasicAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "get_authorization_header",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "member.models",
        "description": "member.models",
        "isExtraImport": true,
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "MemberSerializer",
        "importPath": "member.serializers",
        "description": "member.serializers",
        "isExtraImport": true,
        "detail": "member.serializers",
        "documentation": {}
    },
    {
        "label": "MemberSerializer",
        "importPath": "member.serializers",
        "description": "member.serializers",
        "isExtraImport": true,
        "detail": "member.serializers",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "FieldDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "format_suffix_patterns",
        "importPath": "rest_framework.urlpatterns",
        "description": "rest_framework.urlpatterns",
        "isExtraImport": true,
        "detail": "rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "DentistProfile",
        "importPath": "dentist_profile.models",
        "description": "dentist_profile.models",
        "isExtraImport": true,
        "detail": "dentist_profile.models",
        "documentation": {}
    },
    {
        "label": "DentistProfile",
        "importPath": "dentist_profile.models",
        "description": "dentist_profile.models",
        "isExtraImport": true,
        "detail": "dentist_profile.models",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "send_email_password_reset",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "send_email_reset",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "send_password_reset",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "forget_password_urls",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "change_user_info_urls",
        "importPath": "email_verification",
        "description": "email_verification",
        "isExtraImport": true,
        "detail": "email_verification",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.loguru",
        "description": "lib.loguru",
        "isExtraImport": true,
        "detail": "lib.loguru",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "importPath": "email_verification.confirm",
        "description": "email_verification.confirm",
        "isExtraImport": true,
        "detail": "email_verification.confirm",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_swagger_view",
        "importPath": "rest_framework_swagger.views",
        "description": "rest_framework_swagger.views",
        "isExtraImport": true,
        "detail": "rest_framework_swagger.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "S3DirectField",
        "importPath": "s3direct.fields",
        "description": "s3direct.fields",
        "isExtraImport": true,
        "detail": "s3direct.fields",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FilterPagination",
        "importPath": "utils.pagination_utils",
        "description": "utils.pagination_utils",
        "isExtraImport": true,
        "detail": "utils.pagination_utils",
        "documentation": {}
    },
    {
        "label": "get_queryset_from_request",
        "importPath": "utils.pagination_utils",
        "description": "utils.pagination_utils",
        "isExtraImport": true,
        "detail": "utils.pagination_utils",
        "documentation": {}
    },
    {
        "label": "generate_password",
        "importPath": "utils.member_utils",
        "description": "utils.member_utils",
        "isExtraImport": true,
        "detail": "utils.member_utils",
        "documentation": {}
    },
    {
        "label": "generate_api_key",
        "importPath": "utils.member_utils",
        "description": "utils.member_utils",
        "isExtraImport": true,
        "detail": "utils.member_utils",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AuthentificationConfig",
        "kind": 6,
        "importPath": "authentification.apps",
        "description": "authentification.apps",
        "peekOfCode": "class AuthentificationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentification'",
        "detail": "authentification.apps",
        "documentation": {}
    },
    {
        "label": "AdminBaseJSONWebTokenAuthentication",
        "kind": 6,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "class AdminBaseJSONWebTokenAuthentication(BaseAuthentication):\n    \"\"\"\n    Token based authentication using the JSON Web Token standard.\n    \"\"\"\n    def get_jwt_value(self, request):\n        pass\n    def authenticate(self, request):\n        \"\"\"\n        Returns a two-tuple of `User` and token if a valid signature has been\n        supplied using JWT-based authentication.  Otherwise returns `None`.",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "AdminJSONWebTokenAuthentication",
        "kind": 6,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "class AdminJSONWebTokenAuthentication(AdminBaseJSONWebTokenAuthentication):\n    \"\"\"\n    Clients should authenticate by passing the token key in the \"Authorization\"\n    HTTP header, prepended with the string specified in the setting\n    `JWT_AUTH_HEADER_PREFIX`. For example:\n        Authorization: JWT eyJhbGciOiAiSFMyNTYiLCAidHlwIj\n    \"\"\"\n    www_authenticate_realm = 'api'\n    def get_jwt_value(self, request):\n        auth = get_authorization_header(request).split()",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "custom_admin_authentication",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def custom_admin_authentication(request, email, password):\n  return authenticate(request, email=email, password=password)\nclass AdminBaseJSONWebTokenAuthentication(BaseAuthentication):\n    \"\"\"\n    Token based authentication using the JSON Web Token standard.\n    \"\"\"\n    def get_jwt_value(self, request):\n        pass\n    def authenticate(self, request):\n        \"\"\"",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_get_secret_key",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_get_secret_key(payload=None):\n    \"\"\"\n    For enhanced security you may want to use a secret key based on user.\n    This way you have an option to logout only this user if:\n        - token is compromised\n        - password is changed\n        - etc.\n    \"\"\"\n    if settings.ADMIN_JWT_AUTH['JWT_GET_USER_SECRET_KEY']:\n        # User = get_user_model()  # noqa: N806",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_payload_handler(user):\n    email_field = 'email'\n    email = user.email\n    warnings.warn(\n        'The following fields will be removed in the future: '\n        '`email` and `id`. ',\n        DeprecationWarning\n    )\n    exp = datetime.utcnow() + settings.ADMIN_JWT_AUTH['JWT_EXPIRATION_DELTA']\n    payload = {",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_get_id_from_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_get_id_from_payload_handler(payload):\n    \"\"\"\n    Override this function if id is formatted differently in payload\n    \"\"\"\n    warnings.warn(\n        'The following will be removed in the future. '\n        'Use `JWT_PAYLOAD_GET_USERNAME_HANDLER` instead.',\n        DeprecationWarning\n    )\n    return payload.get('id')",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_get_email_from_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_get_email_from_payload_handler(payload):\n    \"\"\"\n    Override this function if email is formatted differently in payload\n    \"\"\"\n    return payload.get('email')\ndef admin_jwt_encode_handler(payload):\n    key = settings.ADMIN_JWT_AUTH['JWT_PRIVATE_KEY'] or admin_jwt_get_secret_key(payload)\n    return jwt.encode(\n        payload,\n        key,",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_encode_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_encode_handler(payload):\n    key = settings.ADMIN_JWT_AUTH['JWT_PRIVATE_KEY'] or admin_jwt_get_secret_key(payload)\n    return jwt.encode(\n        payload,\n        key,\n        settings.ADMIN_JWT_AUTH['JWT_ALGORITHM']\n    ).decode('utf-8')\ndef admin_jwt_decode_handler(token):\n    options = {\n        'verify_exp': settings.ADMIN_JWT_AUTH['JWT_VERIFY_EXPIRATION'],",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_decode_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_decode_handler(token):\n    options = {\n        'verify_exp': settings.ADMIN_JWT_AUTH['JWT_VERIFY_EXPIRATION'],\n    }\n    # get user from token, BEFORE verification, to get user secret key\n    unverified_payload = jwt.decode(token, None, False)\n    secret_key = admin_jwt_get_secret_key(unverified_payload)\n    # str_token = token.decode('utf-8').strip()\n    str_token = str(token, 'utf-8').strip()\n    res = jwt.decode(",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "admin_jwt_response_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_admin_jwt",
        "description": "authentification.custom_admin_jwt",
        "peekOfCode": "def admin_jwt_response_payload_handler(token, user=None, request=None):\n    \"\"\"\n    Returns the response data for both the login and refresh views.\n    Override to return a custom response such as including the\n    serialized representation of the User.\n    Example:\n    def jwt_response_payload_handler(token, user=None, request=None):\n        return {\n            'token': token,\n            'user': UserSerializer(user, context={'request': request}).data",
        "detail": "authentification.custom_admin_jwt",
        "documentation": {}
    },
    {
        "label": "BaseJSONWebTokenAuthentication",
        "kind": 6,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "class BaseJSONWebTokenAuthentication(BaseAuthentication):\n    \"\"\"\n    Token based authentication using the JSON Web Token standard.\n    \"\"\"\n    def get_jwt_value(self, request):\n        pass\n    def authenticate(self, request):\n        \"\"\"\n        Returns a two-tuple of `User` and token if a valid signature has been\n        supplied using JWT-based authentication.  Otherwise returns `None`.",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "JSONWebTokenAuthentication",
        "kind": 6,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "class JSONWebTokenAuthentication(BaseJSONWebTokenAuthentication):\n    \"\"\"\n    Clients should authenticate by passing the token key in the \"Authorization\"\n    HTTP header, prepended with the string specified in the setting\n    `JWT_AUTH_HEADER_PREFIX`. For example:\n        Authorization: JWT eyJhbGciOiAiSFMyNTYiLCAidHlwIj\n    \"\"\"\n    www_authenticate_realm = 'api'\n    def get_jwt_value(self, request):\n        auth = get_authorization_header(request).split()",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_get_secret_key",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_get_secret_key(payload=None):\n    \"\"\"\n    For enhanced security you may want to use a secret key based on member.\n    This way you have an option to logout only this member if:\n        - token is compromised\n        - password is changed\n        - etc.\n    \"\"\"\n    if settings.JWT_AUTH['JWT_GET_USER_SECRET_KEY']:\n        # Member = get_member_model()  # noqa: N806",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_payload_handler(member):\n    email_field = 'email'\n    email = member.email\n    warnings.warn(\n        'The following fields will be removed in the future: '\n        '`email` and `id`. ',\n        DeprecationWarning\n    )\n    exp = datetime.utcnow() + settings.JWT_AUTH['JWT_EXPIRATION_DELTA']\n    payload = {",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_get_id_from_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_get_id_from_payload_handler(payload):\n    \"\"\"\n    Override this function if id is formatted differently in payload\n    \"\"\"\n    warnings.warn(\n        'The following will be removed in the future. '\n        'Use `JWT_PAYLOAD_GET_USERNAME_HANDLER` instead.',\n        DeprecationWarning\n    )\n    return payload.get('id')",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_get_email_from_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_get_email_from_payload_handler(payload):\n    \"\"\"\n    Override this function if email is formatted differently in payload\n    \"\"\"\n    return payload.get('email')\ndef jwt_encode_handler(payload):\n    key = settings.JWT_AUTH['JWT_PRIVATE_KEY'] or jwt_get_secret_key(payload)\n    return jwt.encode(\n        payload,\n        key,",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_encode_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_encode_handler(payload):\n    key = settings.JWT_AUTH['JWT_PRIVATE_KEY'] or jwt_get_secret_key(payload)\n    return jwt.encode(\n        payload,\n        key,\n        settings.JWT_AUTH['JWT_ALGORITHM']\n    ).decode('utf-8')\ndef jwt_decode_handler(token):\n    options = {\n        'verify_exp': settings.JWT_AUTH['JWT_VERIFY_EXPIRATION'],",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_decode_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_decode_handler(token):\n    options = {\n        'verify_exp': settings.JWT_AUTH['JWT_VERIFY_EXPIRATION'],\n    }\n    # get member from token, BEFORE verification, to get member secret key\n    unverified_payload = jwt.decode(token, None, False)\n    secret_key = jwt_get_secret_key(unverified_payload)\n    # str_token = token.decode('utf-8').strip()\n    str_token = str(token, 'utf-8').strip()\n    res = jwt.decode(",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "jwt_response_payload_handler",
        "kind": 2,
        "importPath": "authentification.custom_jwt",
        "description": "authentification.custom_jwt",
        "peekOfCode": "def jwt_response_payload_handler(token, member=None, request=None):\n    \"\"\"\n    Returns the response data for both the login and refresh views.\n    Override to return a custom response such as including the\n    serialized representation of the Member.\n    Example:\n    def jwt_response_payload_handler(token, member=None, request=None):\n        return {\n            'token': token,\n            'member': MemberSerializer(member, context={'request': request}).data",
        "detail": "authentification.custom_jwt",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrReadOnly",
        "kind": 6,
        "importPath": "authentification.custom_permissions",
        "description": "authentification.custom_permissions",
        "peekOfCode": "class IsOwnerOrReadOnly(permissions.BasePermission):\n  \"\"\"\n  Object-level permission to only allow owners of an object to edit it.\n  Assumes the model instance has an `owner` attribute.\n  \"\"\"\n  def has_object_permission(self, request, view, obj):\n    return obj.owner == request.member\nclass AllowAny(permissions.BasePermission):\n    \"\"\"\n    Allow any access.",
        "detail": "authentification.custom_permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "kind": 6,
        "importPath": "authentification.custom_permissions",
        "description": "authentification.custom_permissions",
        "peekOfCode": "class AllowAny(permissions.BasePermission):\n    \"\"\"\n    Allow any access.\n    This isn't strictly required, since you could use an empty\n    permission_classes list, but it's useful because it makes the intention\n    more explicit.\n    \"\"\"\n    def has_permission(self, request, view):\n        return True\nclass IsAuthenticated(permissions.BasePermission):",
        "detail": "authentification.custom_permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "kind": 6,
        "importPath": "authentification.custom_permissions",
        "description": "authentification.custom_permissions",
        "peekOfCode": "class IsAuthenticated(permissions.BasePermission):\n    \"\"\"\n    Allows access only to authenticated members.\n    \"\"\"\n    def has_permission(self, request, view):\n        member = request.user\n        if bool(member and member.is_authenticated):\n            return True\n        return False\nclass IsAdminUser(permissions.BasePermission):",
        "detail": "authentification.custom_permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "kind": 6,
        "importPath": "authentification.custom_permissions",
        "description": "authentification.custom_permissions",
        "peekOfCode": "class IsAdminUser(permissions.BasePermission):\n    \"\"\"\n    Allows access only to admin members.\n    \"\"\"\n    def has_permission(self, request, view):\n        if request.user is None:\n            return False\n        try:\n            exist_is_superuser = request.user._meta.get_field('is_superuser')\n            if exist_is_superuser:",
        "detail": "authentification.custom_permissions",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class LoginSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n      'password',\n    )\nclass RegisterSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n      'type',\n      'first_name',\n      'last_name',\n      'sex',\n      'telnumber',",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterByEmailSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class RegisterByEmailSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n      'type',\n      'first_name',\n      'last_name',\n      'sex',\n      'telnumber',",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "ChangeEmailSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class ChangeEmailSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n    )\nclass ChangePasswordSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n      'new_password'\n    )\nclass ForgetPasswordSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "ForgetPasswordSerializer",
        "kind": 6,
        "importPath": "authentification.serializers",
        "description": "authentification.serializers",
        "peekOfCode": "class ForgetPasswordSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'email',\n    )",
        "detail": "authentification.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "authentification.urls",
        "description": "authentification.urls",
        "peekOfCode": "urlpatterns = [\n  path('login/', views.CustomLogin.as_view()),\n  # path('login_by_email/', views.CustomLoginByEmail.as_view()),\n  path('logout/', views.Logout.as_view()),\n  path('register/', views.Register.as_view()),\n  # path('register_by_email/', views.RegisterByEmail.as_view()),\n  path('forget_password/', views.ForgetPassword.as_view()),\n  path('change_user_info/changeMail/', views.ChangeUserInfoMail.as_view()),\n  path('change_user_info/changePassword/', views.ChangeUserInfoPassword.as_view()),\n  path('change_user_info/resetPassword/', views.ChangeUserResetPassword.as_view()),",
        "detail": "authentification.urls",
        "documentation": {}
    },
    {
        "label": "CustomLogin",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class CustomLogin(APIView):\n    permission_classes = []\n    def process_admin_user(self, request, admin, serializer):\n      admin_user = custom_admin_authentication(\n        request, \n        email=serializer.data['email'],\n        password=serializer.data['password']\n      )\n      if admin_user is None:\n        return Response(status=status.HTTP_401_UNAUTHORIZED)",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "CustomLoginByEmail",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class CustomLoginByEmail(APIView):\n    permission_classes = []\n    def process_admin_user(self, request, admin, serializer):\n      admin_user = custom_admin_authentication(\n        request, \n        email=serializer.data['email'],\n        password=serializer.data['password']\n      )\n      if admin_user is None:\n        return Response(status=status.HTTP_401_UNAUTHORIZED)",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "Logout",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class Logout(APIView):\n    permission_classes = []\n    def post(self, request, *args, **kwargs):\n        # simply delete the token to force a login\n        user = request.user\n        try:\n            if hasattr(user, 'auth_token'):\n              user.auth_token.delete()\n        except (AttributeError, ObjectDoesNotExist) as ex:\n            logger.error(f'logout error: {str(ex)} on {ex.__traceback__.tb_lineno} line')",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "Register",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class Register(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=RegisterSerializer(many=False),\n        responses={200: MemberSerializer(many=False)}\n    )\n    def post(self, request, format=None):      \n      serializer = RegisterSerializer(data=request.data, many=False)\n      if serializer.is_valid():\n        # if 'udid' in serializer.data:",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "ChangeUserInfo",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class ChangeUserInfo(APIView):\n  permission_classes = []\n  @swagger_auto_schema(\n      request_body=RegisterSerializer(many=False),\n      responses={200: MemberSerializer(many=False)}\n  )\n  def post(self, request, format=None):      \n    serializer = LoginSerializer(\n      data=request.data,\n      context={'request': request}",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "RegisterByEmail",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class RegisterByEmail(APIView):\n    permission_classes = []\n    def update_and_resend_verifiction_token(self, request, member):\n      member_serializer = MemberSerializer(member, request.data)\n      if member_serializer.is_valid():\n        member_serializer.save()\n        member.save()\n        send_email(member)\n        return Response(member_serializer.validated_data, status=status.HTTP_200_OK)\n      else:",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "ForgetPassword",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class ForgetPassword(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=ForgetPasswordSerializer(many=False),\n        responses={200: {}}\n    )\n    def post(self, request, format=None):      \n      serializer = ForgetPasswordSerializer(data=request.data, many=False)\n      if serializer.is_valid():\n        # Check validation",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "ChangeUserInfoMail",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class ChangeUserInfoMail(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=ChangeEmailSerializer(many=False),\n        responses={200: {}}\n    )\n    def post(self, request, format=None):      \n      serializer = ChangeEmailSerializer(data=request.data, many=False)\n      if serializer.is_valid():\n        # Check validation",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "ChangeUserInfoPassword",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class ChangeUserInfoPassword(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=ChangePasswordSerializer(many=False),\n        responses={200: {}}\n    )\n    def post(self, request, format=None):      \n      serializer = ChangePasswordSerializer(data=request.data, many=False)\n      if serializer.is_valid():\n        # Check validation",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "ChangeUserResetPassword",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class ChangeUserResetPassword(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=ChangePasswordSerializer(many=False),\n        responses={200: {}}\n    )\n    def post(self, request, format=None):      \n      serializer = ChangePasswordSerializer(data=request.data, many=False)\n      if serializer.is_valid():\n        # Check validation",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "VerifyResetPasswordToken",
        "kind": 6,
        "importPath": "authentification.views",
        "description": "authentification.views",
        "peekOfCode": "class VerifyResetPasswordToken(APIView):\n    permission_classes = []\n    @swagger_auto_schema(\n        request_body=ChangePasswordSerializer(many=False),\n        responses={200: {}}\n    )\n    def post(self, request, format=None):\n      token = request.data['token']\n      if token:\n        success, member = verify_token(token)",
        "detail": "authentification.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-^05ey65*nhi&0*c0x%$f1!zsve^k&1cld(5#%y#a6_%oq$o*yr'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nDJANGO_APPS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-^05ey65*nhi&0*c0x%$f1!zsve^k&1cld(5#%y#a6_%oq$o*yr'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nTHIRD_PARTY_APPS=[\n    'rest_framework',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOCAL_APPS = [\n    'authentification',\n]\nINSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'config.urls'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    # 'default': {\n    #     'ENGINE': 'django.db.backends.sqlite3',\n    #     'NAME': BASE_DIR / 'db.sqlite3',\n    # }\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    # 'default': {\n    #     'ENGINE': 'django.db.backends.sqlite3',\n    #     'NAME': BASE_DIR / 'db.sqlite3',\n    # }\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': env('DATABASE_NAME', default='itrasy'),\n        'USER': env('DATABASE_USER_NAME', default='postgres'),\n        'PASSWORD': env('DATABASE_PASSWORD', default='postgres'),",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "trigger_error",
        "kind": 2,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "def trigger_error(request):\n  division_by_zero = 1 / 0\nurlpatterns = [\n    # Admin URL\n    path('super-admin/', admin.site.urls),\n    path('_nested_admin/', include('nested_admin.urls')),\n    # Sentry URL for remote logging\n    path('sentry-debug/', trigger_error),\n    # Auth URL\n    path('email/', include(email_urls)),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "swagger_schema_view",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "swagger_schema_view = get_swagger_view(\n    title='itrasy API',\n    url=env('SWAGGER_BASE_URL', default='https://app.itrasy.com/'),\n    urlconf=env('SWAGGER_BASE_URL', default='https://app.itrasy.com/'),\n)\nschema_view = get_schema_view(\n  openapi.Info(\n    title=\"itrasy API\",\n    default_version='v1',\n    description=\"REST API for itrasy backend application\",",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "schema_view = get_schema_view(\n  openapi.Info(\n    title=\"itrasy API\",\n    default_version='v1',\n    description=\"REST API for itrasy backend application\",\n    # Moi Julio, j'ai commenté\n    # terms_of_service=env('SWAGGER_BASE_URL', default='https://app.itrasy.com/') + 'termsofservice',\n    # contact=openapi.Contact(email=\"contact@itrasy.com\"),\n    # license=openapi.License(name=\"itrasy\"),\n  ),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin URL\n    path('super-admin/', admin.site.urls),\n    path('_nested_admin/', include('nested_admin.urls')),\n    # Sentry URL for remote logging\n    path('sentry-debug/', trigger_error),\n    # Auth URL\n    path('email/', include(email_urls)),\n    path('forget_password/', include(forget_password_urls)),\n    path('change_user_info/', include(change_user_info_urls)),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "MemberAdmin",
        "kind": 6,
        "importPath": "member.admin",
        "description": "member.admin",
        "peekOfCode": "class MemberAdmin(ImportExportModelAdmin):\n  fields = (\n    'id',\n    'image',\n    'image_tag',\n    'email',\n    'type',\n    'first_name',\n    'last_name',\n    'telnumber',",
        "detail": "member.admin",
        "documentation": {}
    },
    {
        "label": "MemberConfig",
        "kind": 6,
        "importPath": "member.apps",
        "description": "member.apps",
        "peekOfCode": "class MemberConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'member'",
        "detail": "member.apps",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "member.models",
        "description": "member.models",
        "peekOfCode": "class Member(models.Model):\n    ADMIN = 'ADMIN'\n    USER = 'USER'\n    MEMBER_TYPE = (\n        (ADMIN, ADMIN),\n        (USER, USER),\n    )\n    image = S3DirectField(dest='member_images', blank=True)\n    email = models.CharField(max_length=60, blank=False)\n    type = models.CharField(choices=MEMBER_TYPE, max_length=15, blank=False)",
        "detail": "member.models",
        "documentation": {}
    },
    {
        "label": "MemberSerializer",
        "kind": 6,
        "importPath": "member.serializers",
        "description": "member.serializers",
        "peekOfCode": "class MemberSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = Member\n    fields = (\n      'id',\n      'image',\n      'email',\n      'type',\n      'first_name',\n      'last_name',",
        "detail": "member.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "member.urls",
        "description": "member.urls",
        "peekOfCode": "urlpatterns = [\n  path('all/', views.MemberList.as_view()),\n  path('create/', views.MemberCreate.as_view()),\n  path('<int:pk>/', views.MemberDetail.as_view()),\n]",
        "detail": "member.urls",
        "documentation": {}
    },
    {
        "label": "MemberList",
        "kind": 6,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "class MemberList(APIView):\n  permission_classes = []\n  @swagger_auto_schema(\n    manual_parameters=FilterPagination.generate_pagination_params(),\n    responses={200: MemberSerializer(many=True)}\n  )\n  def get(self, request, format=None):\n    resultset = FilterPagination.get_paniation_data(\n      request,\n      Member,",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "MemberDetail",
        "kind": 6,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "class MemberDetail(APIView):\n  def get_object(self, pk):\n    try:\n      return Member.objects.get(pk=pk)\n    except Member.DoesNotExist:\n      raise Http404\n  @swagger_auto_schema(\n    responses={200: MemberSerializer(many=False)}\n  )\n  def get(self, request, pk, format=None):",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "MemberCreate",
        "kind": 6,
        "importPath": "member.views",
        "description": "member.views",
        "peekOfCode": "class MemberCreate(APIView):\n  @swagger_auto_schema(\n      request_body=MemberSerializer(many=False),\n      responses={200: MemberSerializer(many=False)}\n  )\n  def post(self, request, format=None):\n    serializer = MemberSerializer(data=request.data, many=False)\n    if serializer.is_valid():\n      # Create new member with serializer\n      new_item = Member.objects.create(**serializer.validated_data)",
        "detail": "member.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]